;; -*-lisp-*-
;;
;; Author: Andy Nagels
;; Date: 2018-04-14
;; StumWM configuration file.

(in-package :stumpwm)

;; change the prefix key to something else
;(set-prefix-key (kbd "s"))

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
     (toggle-mode-line (current-screen) (current-head)))

;; Default X mouse cursor from X to an arrow
(stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

;; Show time, cpu usage and network traffic in the modeline
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c | %l | [^B%n^b] %W"))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

;; Focus follows mouse
(setf *mouse-focus-policy* :sloppy) ;; :click, :ignore, :sloppy

;; Virtual desktops (groups)
(run-commands "gnewbg 1"
              "gnewbg 2"
              "gnewbg 3"
              "gnewbg 4"
              "gnewbg 5"
              "gnewbg 6"
              "gnewbg 7"
              "gnewbg 8"
              "gnewbg 9"
              "gnewbg 10")

;; Window movement
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-l") "move-focus right")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-L") "move-window right")
;; Splitting
(define-key *top-map* (kbd "C-s-h") "hsplit")
(define-key *top-map* (kbd "C-s-v") "vsplit")
;; Workspace movement
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-6") "gselect 6")
(define-key *top-map* (kbd "s-7") "gselect 7")
(define-key *top-map* (kbd "s-8") "gselect 8")
(define-key *top-map* (kbd "s-9") "gselect 9")
(define-key *top-map* (kbd "s-10") "gselect 10")
;; Rofi
(define-key *top-map* (kbd "s-p") (concatenate 'string "exec rofi -font " "inconsolata 16" " -show run"))
;; Lock screen
(define-key *top-map* (kbd "s-X") "exec xlock")
;; Terminal
(define-key *top-map* (kbd "S-s-RET") "exec urxvtc")

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (substitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

(make-web-jump "duckduckgo" "firefox https://duckduckgo.com/?q=")
(make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "C-d") "duckduckgo")
(define-key *root-map* (kbd "C-i") "imdb")

;; Message window font
(set-font "inconsolata-16")

;;; Define window placement policy...
;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "2"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t   t :class "Firefox"))
;(define-frame-preference "Ardour"
;  (0 t   t   :instance "ardour_editor" :type :normal)
;  (0 t   t   :title "Ardour - Session Control")
;  (0 nil nil :class "XTerm")
;  (1 t   nil :type :normal)
;  (1 t   t   :instance "ardour_mixer")
;  (2 t   t   :instance "jvmetro")
;  (1 t   t   :instance "qjackctl")
;  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))
;
;(define-frame-preference "Shareland"
;  (0 t   nil :class "XTerm")
;  (1 nil t   :class "aMule"))
;
;(define-frame-preference "Emacs"
;  (1 t t :restore "emacs-editing-dump" :title "...xdvi")
;  (0 t t :create "emacs-dump" :class "Emacs"))
